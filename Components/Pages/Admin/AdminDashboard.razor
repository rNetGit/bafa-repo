@page "/admin"
@attribute [Authorize]
@using BafaMobile.Models
@using BafaMobile.Services
@inject UserSessionService SessionService
@inject IUserSessionService UserSessionService
@inject NavigationManager Navigation
@using BafaMobile.Data
@using Microsoft.EntityFrameworkCore
@inject BafaDbContext DbContext
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<h4 class="fw-bold text-center mt-4">Admin Dashboard</h4>

<div class="container mt-4">
    <div class="row justify-content-center g-3">
        <div class="col-md-4 col-lg-3">
            <a class="btn btn-outline-primary w-100 py-3" href="/admin/member">
                <i class="bi bi-people-fill fs-4 d-block mb-2"></i>
                <span class="fs-5">Members</span>
            </a>
        </div>
        <div class="col-md-4 col-lg-3">
            <a class="btn btn-outline-success w-100 py-3" href="/admin/admevents">
                <i class="bi bi-calendar-event fs-4 d-block mb-2"></i>
                <span class="fs-5">Events</span>
            </a>
        </div>
        <div class="col-md-4 col-lg-3">
            <a class="btn btn-outline-warning w-100 py-3" href="/admin/admdonations">
                <i class="bi bi-cash-stack fs-4 d-block mb-2"></i>
                <span class="fs-5">Donations</span>
            </a>
        </div>
        <div class="col-md-4 col-lg-3">
            <a class="btn btn-outline-dark w-100 py-3" href="/admin/admbd">
                <i class="bi bi-diagram-3-fill fs-4 d-block mb-2"></i>
                <span class="fs-5">Board</span>
            </a>
        </div>
    </div>
</div>

<div class="card mb-4 mt-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">Membership Stats - @currentYear</h5>
    </div>
    <div class="card-body">
        <div style="height: 300px;">
            <canvas id="membershipBarChart"></canvas>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header bg-success text-white">
        <h5 class="mb-0">Event Registrations - @currentYear</h5>
    </div>
    <div class="card-body">
        <div style="height: 300px;">
            <canvas id="eventDonutChart"></canvas>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header bg-warning text-dark">
        <h5 class="mb-0">Payments by Purpose - @currentYear</h5>
    </div>
    <div class="card-body">
        <div style="height: 300px;">
            <canvas id="paymentPieChart"></canvas>
        </div>
    </div>
</div>

@code {
    private UserModel? currentUser;
    private int currentYear = DateTime.Now.Year;
    private Dictionary<string, Dictionary<string, int>> membershipStats = new();
    private bool chartInitialized = false;
    private bool isDisposed;
    private List<string> eventNames = new();
    private List<int> eventRegistrationCounts = new();
    private List<string> paymentPurposes = new();
    private List<double> paymentAmounts = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserSessionService.GetCurrentUserAsync();

        if (currentUser?.Email != "admin@bafa.org")
        {
            Navigation.NavigateTo(Navigation.BaseUri, forceLoad: true);
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            string currentYearStr = DateTime.Now.Year.ToString();

            // Load membership data
            var memberships = await DbContext.Memberships
                .Where(m => m.Year == currentYearStr)
                .ToListAsync();

            // Group by MembershipType and MembershipStatus
            membershipStats = memberships
                .GroupBy(m => m.MembershipType ?? "Unknown")
                .ToDictionary(
                    g => g.Key,
                    g => g.GroupBy(m => m.MembershipStatus ?? "Unknown")
                          .ToDictionary(sg => sg.Key, sg => sg.Count())
                );

            // Load event data
            var allEvents = await DbContext.Events.ToListAsync();
            var currentYearEvents = allEvents
                .Where(e => e.EventDate.Year == currentYear)
                .ToList();

            var eventIds = currentYearEvents.Select(e => e.Id).ToList();

            // Fetch all registrations and filter by year and event id in memory
            var allRegistrations = await DbContext.EventRegistrations.ToListAsync();
            var registrations = allRegistrations
                .Where(r => r.RegisteredOn.Year == currentYear && eventIds.Contains(r.EventId))
                .ToList();

            eventNames = currentYearEvents.Select(e => e.Name).ToList();
            eventRegistrationCounts = currentYearEvents
                .Select(e => registrations.Count(r => r.EventId == e.Id))
                .ToList();

            // Load payment data
            var allPayments = await DbContext.PaymentIntents.ToListAsync();
            var currentYearPayments = allPayments
                .Where(p => !string.IsNullOrWhiteSpace(p.CreatedOn) && 
                           DateTime.TryParse(p.CreatedOn, out var paymentDate) && 
                           paymentDate.Year == currentYear)
                .ToList();

            paymentPurposes = currentYearPayments
                .GroupBy(p => p.Purpose ?? "Unknown")
                .Select(g => g.Key)
                .ToList();

            paymentAmounts = currentYearPayments
                .GroupBy(p => p.Purpose ?? "Unknown")
                .Select(g => (double)g.Sum(x => x.Amount))
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isDisposed)
        {
            if (!chartInitialized && membershipStats.Any())
            {
                chartInitialized = true;
                
                // Prepare data for the membership chart
                var membershipTypes = membershipStats.Keys.ToArray();
                var statuses = membershipStats.Values
                    .SelectMany(d => d.Keys)
                    .Distinct()
                    .ToArray();

                var datasets = statuses.Select(status => new
                {
                    label = status,
                    data = membershipTypes.Select(type => 
                        membershipStats[type].ContainsKey(status) ? membershipStats[type][status] : 0
                    ).ToArray()
                }).ToArray();

                await JSRuntime.InvokeVoidAsync("renderMembershipStackedBarChart", 
                    membershipTypes,
                    statuses,
                    datasets.Select(d => d.label).ToArray(),
                    datasets.Select(d => d.data).ToArray()
                );
            }

            // Render event chart
            if (firstRender && eventNames.Any())
            {
                await JSRuntime.InvokeVoidAsync("renderEventDonutChart", 
                    eventNames.ToArray(), 
                    eventRegistrationCounts.ToArray()
                );
            }

            // Render payment chart
            if (firstRender && paymentPurposes.Any())
            {
                await JSRuntime.InvokeVoidAsync("renderPaymentPieChart", 
                    paymentPurposes.ToArray(), 
                    paymentAmounts.ToArray()
                );
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (!isDisposed)
        {
            isDisposed = true;
            try
            {
                await JSRuntime.InvokeVoidAsync("cleanupAllCharts");
            }
            catch (JSDisconnectedException)
            {
                // Circuit is already disconnected, no need to cleanup
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during cleanup: {ex.Message}");
            }
        }
    }
}
