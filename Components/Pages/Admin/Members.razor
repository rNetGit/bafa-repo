@page "/admin/members"
@using BafaMobile.Data
@using BafaMobile.Models
@using BafaMobile.Services
@using Microsoft.EntityFrameworkCore
@inject UserSessionService SessionService
@inject IUserSessionService UserSessionService
@inject BafaDbContext DbContext
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4 gap-3">
        <div>
            <h4 class="fw-bold mb-1">Member Management</h4>
            <p class="text-muted mb-0">Manage NYBAFA members and their information</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/admin/members/new"))">
                <i class="bi bi-person-plus me-2"></i>Add Member
            </button>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-12 col-md-4">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-end-0">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control border-start-0" placeholder="Search members..." 
                               @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
                    </div>
                </div>
                <div class="col-6 col-md-2">
                     <select class="form-select" @bind="yearFilter" @bind:after="ApplyFilters">
                        <option value="">All Years</option>
                        @foreach (var year in availableYears)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>
                <div class="col-6 col-md-2">
                    <select class="form-select" @bind="statusFilter" @bind:after="ApplyFilters">
                        <option value="">All Status</option>
                        <option value="Active">Active</option>
                        <option value="Pending">Pending</option>
                        <option value="Inactive">Inactive</option>
                        <option value="Expired">Expired</option>
                    </select>
                </div>
                <div class="col-12 col-md-4">
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary flex-grow-1" @onclick="ExportToExcel">
                            <i class="bi bi-file-earmark-excel me-2"></i>Export
                        </button>
                        <button class="btn btn-outline-primary flex-grow-1" @onclick="RefreshData">
                            <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Members List -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="border-0">Name</th>
                            <th class="border-0">Type</th>
                            <th class="border-0">Status</th>
                            <th class="border-0">Fee</th>
                            <th class="border-0">Paid</th>
                            <th class="border-0 d-none d-md-table-cell">Pay Mode</th>
                            <th class="border-0 text-end">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (members == null || !members.Any())
                        {
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <div class="text-muted">
                                        <i class="bi bi-people display-6 d-block mb-2"></i>
                                        No members found
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var member in members)
                            {
                                <tr>
                                    <td>@member.FirstName @member.LastName</td>
                                    <td>@member.MembershipType</td>
                                    <td><span class="badge bg-@member.StatusColor">@member.Status</span></td>
                                    <td>$@member.MembershipFee</td>
                                    <td>
                                        @if (member.IsPaid)
                                        {
                                            <span class="badge bg-success">Yes</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">No</span>
                                        }
                                    </td>
                                    <td class="d-none d-md-table-cell">@member.PayMode</td>
                                    <td>
                                        <div class="d-flex justify-content-end gap-2">
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="@(() => ViewMember(member.Id))">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="@(() => EditMember(member.Id))">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    @onclick="@(() => DeleteMember(member.Id))">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (members != null && members.Any())
            {
                <div class="d-flex justify-content-between align-items-center p-3 border-top">
                    <div class="text-muted small">
                        Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, totalMembers)) of @totalMembers members
                    </div>
                    <div class="d-flex gap-2">
                        <button class="btn btn-sm btn-outline-primary" 
                                @onclick="PreviousPage" 
                                disabled="@(currentPage == 1)">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-primary" 
                                @onclick="NextPage" 
                                disabled="@(currentPage >= totalPages)">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .table > :not(caption) > * > * {
        padding: 1rem;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
    }

    @@media (max-width: 768px) {
        .table > :not(caption) > * > * {
            padding: 0.75rem;
        }
    }
</style>

@code {
    private List<MembershipModel> members;
    private string searchTerm = "";
    private string statusFilter = "";
    private string yearFilter = "";
    private List<int> availableYears = new();
    private string sortBy = "name";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalMembers = 0;
    private int totalPages => (int)Math.Ceiling(totalMembers / (double)pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableYears();
        await LoadMembers();
    }

    private async Task LoadAvailableYears()
    {
        try
        {
            availableYears = await DbContext.Memberships
                .Select(m => m.JoinDate.Year)
                .Distinct()
                .OrderByDescending(y => y)
                .ToListAsync();
        }
        catch (Exception ex)
        {
             Console.WriteLine($"Error loading available years: {ex.Message}");
        }
    }

    private async Task LoadMembers()
    {
        try
        {
            var query = DbContext.Memberships.AsQueryable();

            // Apply search filter
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                query = query.Where(m => 
                    m.FirstName.Contains(searchTerm) || 
                    m.LastName.Contains(searchTerm) || 
                    m.Email.Contains(searchTerm));
            }

            // Apply year filter
            if (!string.IsNullOrWhiteSpace(yearFilter) && int.TryParse(yearFilter, out int year))
            {
                query = query.Where(m => m.JoinDate.Year == year);
            }

            // Apply status filter
            if (!string.IsNullOrWhiteSpace(statusFilter))
            {
                query = query.Where(m => m.Status == statusFilter);
            }

            // Get total count
            totalMembers = await query.CountAsync();

            // Apply sorting
            query = sortBy switch
            {
                "name" => query.OrderBy(m => m.LastName).ThenBy(m => m.FirstName),
                "date" => query.OrderByDescending(m => m.JoinDate),
                "status" => query.OrderBy(m => m.Status),
                _ => query.OrderBy(m => m.LastName)
            };

            // Apply pagination
            members = await query
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading members: {ex.Message}");
        }
    }

    private async Task HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadMembers();
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadMembers();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadMembers();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadMembers();
        }
    }

    private async Task RefreshData()
    {
        currentPage = 1;
        await LoadMembers();
    }

    private async Task ExportToExcel()
    {
        try
        {
            // Implement Excel export functionality
            await JSRuntime.InvokeVoidAsync("alert", "Export functionality will be implemented soon");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting data: {ex.Message}");
        }
    }

    private void ViewMember(int id)
    {
        Navigation.NavigateTo($"/admin/members/view/{id}");
    }

    private void EditMember(int id)
    {
        Navigation.NavigateTo($"/admin/members/edit/{id}");
    }

    private async Task DeleteMember(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this member?"))
        {
            try
            {
                var member = await DbContext.Memberships.FindAsync(id);
                if (member != null)
                {
                    DbContext.Memberships.Remove(member);
                    await DbContext.SaveChangesAsync();
                    await LoadMembers();
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting member: {ex.Message}");
            }
        }
    }
} 