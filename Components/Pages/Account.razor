@page "/account"


@using BafaMobile.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using BafaMobile.Models
@using BafaMobile.Services
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject BafaDbContext Db
@inject UserManager<AppUser> UserManager
@inject UserSessionService SessionService
@inject IUserSessionService UserSessionService

<h4 class="fw-bold mt-4">BAFA Account</h4>
<p>Create an account to manage your membership</p>
    
    <div class="card p-4 shadow-sm mt-3">
        <h5 class="text-success mb-3"><i class="bi bi-person-plus"></i> Create Account</h5>
        @if (!string.IsNullOrEmpty(registerMessage))
        {
            <div class="alert alert-danger">@registerMessage</div>
        }
        <EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="RegisterForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>Full Name</label>
                <InputText class="form-control" @bind-Value="registerModel.FullName" />
            </div>

            <div class="mb-3">
                <label>Email</label>
                <InputText class="form-control" @bind-Value="registerModel.Email" />
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText class="form-control" @bind-Value="registerModel.Password" type="password" />
            </div>

            <div class="mb-3">
                <label>Confirm Password</label>
                <InputText class="form-control" @bind-Value="registerModel.ConfirmPassword" type="password" />
            </div>

            <button class="btn btn-success w-100">Create Account</button>
        </EditForm>
    </div>

@code {

    [Inject]
    private IHttpContextAccessor HttpContextAccessor { get; set;}

    private bool isLogin = true;
    private string loginMessage;
    private string registerMessage;

    private LoginModel loginModel = new();
    private RegisterModel registerModel = new();

    private bool isProcessing = false;
    private string loginError = string.Empty;
    private string isAuthenticated = "1";

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
    }

    public class RegisterModel
    {
        [Required]
        public string FullName { get; set; }

        [Required, EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }

        [Required]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }
    protected override void OnInitialized()
    {
       
    }

    private async Task HandleLogin()
    {
        if (isProcessing) return;

        try
        {
            isProcessing = true;
            loginError = string.Empty;

            var user = await UserManager.FindByEmailAsync(loginModel.Email);
            if (user != null && await UserManager.CheckPasswordAsync(user, loginModel.Password))
            {
                var currentUser = new UserModel
                {
                    UserId = user.Id,
                    FirstName = user.FullName.Split(' ').FirstOrDefault() ?? "",
                    LastName = user.FullName.Split(' ').Skip(1).FirstOrDefault() ?? "",
                    Email = user.UserName
                };

                await UserSessionService.SetCurrentUserAsync(currentUser);
                Navigation.NavigateTo(Navigation.BaseUri, forceLoad: true);
                return;
            }

            loginError = "Invalid credentials. Please try again.";
            isAuthenticated = "0";
        }
        catch (Exception ex)
        {
            loginError = $"Login error: {ex.Message}";
            isAuthenticated = "0";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
   


    private async Task HandleRegister()
    {
        var user = new AppUser
            {
                UserName = registerModel.Email,
                Email = registerModel.Email,
                FullName = registerModel.FullName
            };

        var result = await UserManager.CreateAsync(user, registerModel.Password);
        if (result.Succeeded)
        {
            // ❌ Remove this (causes header issue)
            // await SignInManager.SignInAsync(user, isPersistent: false);

            // ✅ Instead: Redirect user to login page
            registerMessage = "Account created. Please sign in.";
            //Navigation.NavigateTo(Navigation.BaseUri, forceLoad: true);
            Navigation.NavigateTo(Navigation.BaseUri, forceLoad: true);
           // isLogin = true; // switch tab
        }
        else
        {
            registerMessage = string.Join("; ", result.Errors.Select(e => e.Description));
        }
    }

}




