@page "/events"
@using BafaMobile.Data
@using Microsoft.AspNetCore.Components.Authorization
@using BafaMobile.Services
@using BafaMobile.Models
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject UserManager<AppUser> UserManager
@inject UserSessionService SessionService
@inject IUserSessionService UserSessionService
@inject BafaDbContext DbContext
@inject IJSRuntime JSRuntime
@using Microsoft.EntityFrameworkCore

<div class="container py-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="fw-bold mb-1">Community Events</h4>
            <p class="text-muted mb-0">Join us for exciting community gatherings and celebrations</p>
        </div>
        <div class="d-flex gap-2">
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-search"></i>
                </span>
                <input class="form-control border-start-0" placeholder="Search events..." @bind="searchText" @oninput="OnSearchInput" />
            </div>
        </div>
    </div>

    <!-- Events Grid -->
    @if (filteredEvents.Any())
    {
        <div class="row g-4">
            @foreach (var evt in filteredEvents)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card h-100 border-0 shadow-sm hover-card">
                        <div class="card-body p-4">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <span class="badge bg-primary">@evt.Type</span>
                                <span class="badge bg-light text-dark">
                                    <i class="bi bi-calendar-event"></i> @evt.EventDate.ToString("MMM dd, yyyy")
                                </span>
                            </div>
                            
                            <h5 class="card-title mb-2">@evt.Name</h5>
                            
                            <div class="d-flex align-items-center text-muted mb-3">
                                <i class="bi bi-geo-alt me-2"></i>
                                <small>@evt.Location</small>
                            </div>

                            <p class="card-text text-muted small mb-4">@evt.Description</p>

                            <div class="d-flex gap-2">
                                @if (user != null)
                                {
                                    <button class="btn btn-primary flex-grow-1" @onclick="@(() => Register(evt.Id))">
                                        <i class="bi bi-calendar-plus me-2"></i>Register
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-primary flex-grow-1" @onclick="@(() => Navigation.NavigateTo("/account"))">
                                        <i class="bi bi-box-arrow-in-right me-2"></i>Sign in to Register
                                    </button>
                                }
                                <button class="btn btn-outline-secondary" @onclick="@(() => ShareEvent(evt))">
                                    <i class="bi bi-share"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-calendar-x display-1 text-muted mb-3"></i>
            <h5>No Events Found</h5>
            <p class="text-muted">There are no upcoming events matching your search.</p>
        </div>
    }
</div>

<style>
    .hover-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .hover-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }

    .input-group-text {
        border-right: none;
    }

    .form-control {
        border-left: none;
    }

    .form-control:focus {
        box-shadow: none;
        border-color: #ced4da;
    }
</style>

@code {
    private List<EventRecord> events = new();
    private string searchText = string.Empty;
    private UserModel? user;
    private bool isProcessing = false;

    private IEnumerable<EventRecord> filteredEvents =>
        string.IsNullOrWhiteSpace(searchText)
            ? events
            : events.Where(e => 
                e.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                e.Location.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                e.Type.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        user = await UserSessionService.GetCurrentUserAsync();
        events = await LoadUpcomingEventsAsync(onlyTopTwo: false);
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
    }

    public async Task<List<EventRecord>> LoadUpcomingEventsAsync(bool onlyTopTwo = false)
    {
        var now = DateTime.Today;
        var query = DbContext.Events
            .Where(e => e.EventDate >= now)
            .OrderBy(e => e.EventDate);

        return onlyTopTwo
            ? await query.Take(2).ToListAsync()
            : await query.ToListAsync();
    }

    private async Task Register(int eventId)
    {
        if (user == null || isProcessing) return;

        try
        {
            isProcessing = true;

            var existing = await DbContext.EventRegistrations
                .FirstOrDefaultAsync(r => r.UserId == user.UserId && r.EventId == eventId);

            if (existing == null)
            {
                DbContext.EventRegistrations.Add(new EventRegistration
                {
                    EventId = eventId,
                    UserId = user.UserId,
                    RegisteredOn = DateTime.UtcNow
                });
                await DbContext.SaveChangesAsync();
                await JSRuntime.InvokeVoidAsync("alert", "Successfully registered for the event!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "You are already registered for this event.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error registering for event: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task ShareEvent(EventRecord evt)
    {
        try
        {
            var eventUrl = $"{Navigation.BaseUri}events";
            var shareText = $"Join us for {evt.Name} on {evt.EventDate:MMM dd, yyyy} at {evt.Location}. Register now at {eventUrl}";
            
            if (await JSRuntime.InvokeAsync<bool>("tryShareEvent", new
            {
                title = evt.Name,
                text = shareText,
                url = eventUrl
            }))
            {
                // Web Share API was successful
                return;
            }
            
            // Fallback if Web Share is not supported or fails
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", shareText);
            await JSRuntime.InvokeVoidAsync("alert", "Event details copied to clipboard!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error sharing event: {ex.Message}");
        }
    }
}
